<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
				         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
				         http://www.springframework.org/schema/context
				         http://www.springframework.org/schema/context/spring-context-3.0.xsd
				         http://www.springframework.org/schema/tx
				         http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
				         http://www.springframework.org/schema/aop 
				         http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- 配置lifeCycleBeanProcessor，shiro和Spring整合之后，shiro的组件都以bean的方式
	     交给Spring容器来管理
	     This post processor makes it easierto configure Shiro beans in Spring
	 -->
	 <bean id="lifeCycleBeanProcessor" 
	 class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>
	 
	 <!-- Spring容器通过动态代理的方式，为lifeCycle生成代理对象，所以需要用depeds-on指定一下 -->
	 <!-- 代理方式
	 	1、jdk的动态代理模式 需要实现接口 value默认不写就是启用jdk的动态代理 生成速度比较快
	 	2、cglib 代理对象时目标对象的子类 ！！！shiro规定都是使用cglib代理 通过二进制码生成 cglib一旦生成代理对象 执行素的比较快
	  -->
	 <bean  class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
	 depends-on="lifeCycleBeanProcessor">
	 	<!-- proxyTargetClass 默认值是false,表示只能用jdk代理  
	 	     如果是true的话，表示指定启用cglib代理 -->
	 	<property name="proxyTargetClass" value="true"></property>
	 </bean>
	
	<!-- shiro和Spring整合之后，必须用cglib进行代理，才能生效，所以强制开启cglib代理
		 把proxy-target-class的值改成 true,表示强制使用cglib进行代理-->
	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
  	
  	
  	<!-- 配置shiro的 安全管理器，（程序员需要通过特定的类告诉shiro将来要执行哪些相关的操作）
  		1.shiro会自动帮你做登录认证和权限认证，但是你得给shiro提供登录的资料（比如用户名和密码）以及权限
  		  认证的资料（比如用户拥有哪些权限）
  		 这些提供资料的代码，会写在一个类里，这个类需要开发人员自己写，一般把这个类叫做AuthRealm,
  		 这个类必须得继承一个类，叫做AuthorizingRealm，之后继承这个类，并且在安全管理器里配置一下，
  		 shiro才能知道有这么个东西，才能给你干活
  	 -->
	 <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	 <!-- property 的name是realm，固定，写死 -->
	 	<property name="realm" ref="AuthRealm"></property>
	 </bean>
	 <bean id="AuthRealm" class="cn.tarena.ht.shiro.AuthRealm">
		 <!-- 添加加密算法的配置 能够自动调用加密类 然后与用户传入的token对比 -->
	 	<property name="credentialsMatcher" ref="authEnctype"></property>
	 </bean>
	 
	<!-- 配置自己定义的加密管理器   -->
	 <bean id="authEnctype" class="cn.tarena.ht.shiro.AuthCredential"></bean>
	 
	 <!-- 权限管理器,想干活，得让领导（安全管理器）知道，所以需要配置一下 -->
	 <bean  class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	 	<property name="securityManager" ref="securityManager"></property>
	 </bean>
	 
	 <!-- 配置shrioFilter bean 目的是让Spring容器代理生成Filter
	 	这个名字得和web.xml里配置shiroFilter的名字一致，因为Spring是根据bean的id来管理的
	      -->
	 <bean id="shiroFilter"  class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	 	<property name="securityManager" ref="securityManager"></property>
	 	<!-- 设置网站的登录页面 -->
	 	<property name="loginUrl" value="/login.jsp"></property>
	 	<!-- 配置shiro的路径拦截 -->
	 	<property name="filterChainDefinitions">
	 	<value>
	 		<!-- authc 是一个关键字，表示拦截 -->
	 		<!-- anon 是一个关键字，表示放行 -->
			<!-- 注意：登录的请求路径别忘了放行，要不然参数传不进不来 -->
	 		/validate/doLogin=anon <!-- 放行登陆资源 -->
	 		/staticfile/**=anon <!-- 放行所有静态资源 -->
	 		/**=authc<!-- 拦截所有资源 -->
	 	</value>
	 	</property>
	 
	 </bean>
	 
	 
</beans> 